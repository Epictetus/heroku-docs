Memcache
========

Memcache is an in-memory transient key/value store typically used for caching.  It's a key technology for building scalable web apps.

If you are already using memcache, you won't need to rewrite your code for it to run on Heroku. Only the gem dependency declaration and the memcache client object initialization ([described below](http://0.0.0.0:4567/memcache#rails-setup)) needs to change.   

Gem Installation
----------------

First remove any memcache client gems you may already be using from your application, such as memcache-client.

You must use a memcache gem that supports SASL. There are two available:

1. <b>Dalli (recommended)</b>: We recommend using [dalli](http://github.com/mperham/dalli). Dalli supports Rails 2 & 3 and Ruby 1.8.7 & 1.9.2. It is compatible with all of our [deployment stacks](/stack), and is the only gem you can use if you wish to use memcache for your sessions store in rails 2 or 3. Full setup instructions for using dalli are available at the [Dalli readme](http://github.com/mperham/dalli). Please note that Dalli does not support older caching libraries such as cache-money or cache_fu.    

2. <b>memcached-northscale</b> is a ruby interface to the libmemcached C client. [Memcached-northscale](http://rubygems.org/gems/memcached-northscale) should be used only if you require compatibility with old caching libraries like cache-money. 

Add whichever Gem you choose to your [Gemfile](/bundler) and run `bundle install`.

NOTE: <b>Mac OS 10.5 Users</b> A bug in port / Mac OS 10.5 causes an error when trying to build the memcached-northscale gem. Snow Leopard (10.6) users are unaffected. To resolve this, uninstall the cyrus-sasl2 library, and then build the memcached-northscale gem. Once the memcached-northscale gem is built, you can reinstall the cyrus-sasl2 package if you require it.<pre style="margin-right:15px">$ sudo port -f uninstall cyrus-sasl2</pre>

Local Setup
-----------

You will need to run a local memcached process to test against with Sinatra or other Ruby app. Install it on Mac OS X:

    :::term
    $ sudo port install memcached

Or use [Homebrew](http://mxcl.github.com/homebrew/) on Mac OS X:

    :::term
    $ brew install memcached
    
Or on Ubuntu:

    :::term
    $ sudo apt-get install memcached

Or [follow these instructions](http://www.codeforest.net/how-to-install-memcached-on-windows-machine) for Windows.

You can also download the source from [the memcached site](http://memcached.org/).

Now run the memcached daemon:

    :::term
    $ memcached -vv
    slab class   1: chunk size     88 perslab 11915
    ...
    <15 server listening

Deploying to Heroku
-------------------

To use memcache on Heroku, install the memcache add-on:

    :::term
    $ heroku addons:add memcache

If you're using the memcached gem as described above, your app will use memcache on Heroku without any further code changes.


Rails Setup
-----------

Rails 2.3.3 and later abstracts the caching mechanisms through `Rails.cache`. You must be using Rails 2.3.3 or newer to use memcache on Heroku.

Please see our documentation for a tutorial on [rails caching strategies on Heroku](rails-caching-strategies).

#### Dalli: Rails 3

In your [Gemfile](/bundler):

    gem 'dalli'

In `config/environments/production.rb`:

    config.cache_store = :dalli_store

#### Dalli: Rails 2.3.3 - 2.3.x

In `config/environment.rb`:

    config.gem 'dalli'

In `config/environments/production.rb`:

    # Object cache
    require 'active_support/cache/dalli_store23'
    config.cache_store = :dalli_store

In `config/initializers/session_store.rb`, set secret to a 30+ character random string:

    # Session cache
    ActionController::Base.session = {
      :namespace   => '_dalli-rails2_session',
 			:secret => '<random_string_of_at_least_30_characters>'
    }
    
    require 'action_controller/session/dalli_store'
    ActionController::Base.session_store = :dalli_store

#### Memcached-northscale: Rails 2.3.3 - 2.3.x

Add the gem via your [Gemfile](/bundler):

    :::ruby
    gem "memcached-northscale"
    
In `config/environment.rb`:

    :::ruby
    config.gem 'memcached-northscale', :lib => 'memcached'
    require 'memcached'
    
In config/environment/production.rb:

    :::ruby
    config.cache_store = :mem_cache_store, Memcached::Rails.new

#### Development Environment    
In your development environment, Rails.cache will default to an in-memory memory store that doesn't require a running memcached.

#### Testing

You can test writing to the local memory cache in a console, or via [heroku console](/console):

    :::term
    $ script/console
    >> Rails.cache.write('color', 'red')

And fetching the data back:

    >> Rails.cache.read('color')
    => "red"

Using from Sinatra
------------------

In your configure block:

    :::ruby
    configure do
      require 'memcached'
      CACHE = Memcached.new
    end

Test it out in a console:

    :::term
    $ irb -r myapp.rb
    >> CACHE.set('color', 'blue')

You should see output like this in your memcached -vv terminal:

    <18 set color 0 604800 7
    >18 STORED

Now read it back:

    >> CACHE.get('color')
    => "blue"

Further reading:

* [Blazing Fast Speeds with Sinatra and Memcached](http://railsillustrated.com/blazing-fast-sinatra-with-memcached.html) by Erik Andrejko


Getting Stats on Usage
----------------------

The memcached gem allows you to access your bucket's stats through the built in stats() method:

    :::term
	$ heroku console
	Ruby console for myapp.heroku.com
	>> mc = Memcached.new
	>> ... truncated output...
	>> mc.stats
	=> {:threads=>[4], :limit_maxbytes=>[67108864], :rusage_user=>[916.12], :cmd_get=>[1759086], :pointer_size=>[64], :total_connections=>[129368], :rusage_system=>[899.37], :cmd_set=>[1699375], :total_items=>[1699375], :time=>[1274128635], :evictions=>[0], :connection_structures=>[470], :version=>["1.4.4_188_g0117a2c"], :uptime=>[677746], :get_hits=>[59653], :bytes=>[2848846], :bytes_read=>[2848846], :curr_connections=>[283], :get_misses=>[1699433], :pid=>[21691], :bytes_written=>[2848846], :curr_items=>[35553]}

The limit_maxbytes is not applicable with the Northscale Memcache Add-on.  
You can not see the engine_maxbytes field which provides the actual bucket size.  Note that for bucket sizes >= 1GB, a bug may prevent you from seeing the full bucket size.
