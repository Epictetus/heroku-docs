Memcache
========

Memcache is an in-memory transient key/value store typically used for caching.  It's a key technology for building scalable web apps.

Gem setup
---------

You must use a memcache gem that supports SASL.  There are two available, [Dalli](http://github.com/mperham/dalli) and  [memcached-northscale](http://rubygems.org/gems/memcached-northscale). We suggest using [dalli](http://github.com/mperham/dalli).  Dalli supports 1.9.2 and Rails 3.  Dalli doesn't support older caching libraries like cache-money however. Memcached is a ruby interface to the libmemcached C client, offering outstanding performance with an identical interface to the Rails memcache-client. If you're already using memcache, you won't need to rewrite your code.  Only the gem dependency declaration and the memcache client object initialization (described below) needs to change.  First remove any memcache client gems you may already be using from your application, such as memcache-client.  Then add memcached to your gem manifest or gemfile.


### Note for Mac OS 10.5 Users

A bug in port / Mac OS 10.5 causes an error when trying to build the memcached-northscale gem.  Snow Leopard (10.6) users do NOT have this bug.  To resolve this, uninstall the cyrus-sasl2 library, and then build the memcached-northscale gem.  Once the memcached-northscale gem is built, you can reinstall the cyrus-sasl2 package if you require it elsewhere.

Uninstall cryus-sasl2:

    :::term
    $ sudo port -f uninstall cyrus-sasl2


Using from Rails
----------------

Rails abstracts the caching mechanisms through Rails.cache.  This was only introduced in Rails 2.3.3.  You must be using Rails 2.3.3 or newer to use memcache on Heroku.

For Rails version 2.3.3 and higher using .gems, update your config/environment.rb:

    :::ruby
    config.gem 'memcached-northscale', :lib => 'memcached'
    require 'memcached'
    
Configure your app to use memcache for the cache store in production.  Add the following to config/environment/production.rb:

    :::ruby
    config.cache_store = :mem_cache_store, Memcached::Rails.new
    
In your development environment, Rails.cache will default to an in-memory memory store that doesn't require a running memcached.

You can test writing to the local memory cache in a console:

    :::term
    $ script/console
    >> Rails.cache.write('color', 'red')

And fetching the data back:

    >> Rails.cache.read('color')
    => "red"

Further reading:

* [Caching with Rails](http://guides.rubyonrails.org/caching_with_rails.html) by RailsGuides

Using from Sinatra
----------------

### Local memcached

You'll need to run a local memcached process to test against with Sinatra or other Ruby app.  Install it on Mac OS X:

    :::term
    $ sudo port install memcached

Or on Ubuntu:

    :::term
    $ sudo apt-get install memcached

You can also download the source from [the memcached site](http://memcached.org/).

Now run the memcached daemon:

    :::term
    $ memcached -vv
    slab class   1: chunk size     88 perslab 11915
    ...
    <15 server listening

### Sinatra app

In your configure block:

    :::ruby
    configure do
      require 'memcached'
      CACHE = Memcached.new
    end

Test it out in a console:

    :::term
    $ irb -r myapp.rb
    >> CACHE.set('color', 'blue')

You should see output like this in your memcached -vv terminal:

    <18 set color 0 604800 7
    >18 STORED

Now read it back:

    >> CACHE.get('color')
    => "blue"

Further reading:

* [Blazing Fast Speeds with Sinatra and Memcached](http://railsillustrated.com/blazing-fast-sinatra-with-memcached.html) by Erik Andrejko

Deploying to Heroku
------------------

To use memcache on Heroku, install the memcache add-on:

    :::term
    $ heroku addons:add memcache

If you're using the memcached gem as described above, your app will use memcache on Heroku without any further code changes.

Getting Stats on Usage
----------------------

The memcached gem allows you to access your bucket's stats through the built in stats() method:

    :::term
	$ heroku console
	Ruby console for myapp.heroku.com
	>> mc = Memcached.new
	>> ... truncated output...
	>> mc.stats
	=> {:threads=>[4], :limit_maxbytes=>[67108864], :rusage_user=>[916.12], :cmd_get=>[1759086], :pointer_size=>[64], :total_connections=>[129368], :rusage_system=>[899.37], :cmd_set=>[1699375], :total_items=>[1699375], :time=>[1274128635], :evictions=>[0], :connection_structures=>[470], :version=>["1.4.4_188_g0117a2c"], :uptime=>[677746], :get_hits=>[59653], :bytes=>[2848846], :bytes_read=>[2848846], :curr_connections=>[283], :get_misses=>[1699433], :pid=>[21691], :bytes_written=>[2848846], :curr_items=>[35553]}

The limit_maxbytes is not applicable with the Northscale Memcache Add-on.  
You can not see the engine_maxbytes field which provides the actual bucket size.  Note that for bucket sizes >= 1GB, a bug may prevent you from seeing the full bucket size.
