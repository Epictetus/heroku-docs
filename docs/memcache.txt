Memcache
========

Memcache is an in-memory transient key/value store typically used for caching.  It's a key technology for building scalable web apps.

Gem setup
---------

The [Dalli](http://rubygems.org/gems/dalli) gem is the recommended Ruby memcache client on Heroku. It is a [rewrite](http://www.mikeperham.com/2010/08/30/dalli-memcached-for-ruby/) memcache-client done by the maintainer and is sponsored by [Northscale](http://www.northscale.com) our [memcached addon provider](http://addons.heroku.com/memcache).

### Note for Mac OS 10.5 Users

A bug in port / Mac OS 10.5 causes an error when trying to build the memcached gem.  Snow Leopard (10.6) users do NOT have this bug.  To resolve this, uninstall the cyrus-sasl2 library, and then build the memcached gem.  Once the memcached gem is built, you can reinstall the cyrus-sasl2 package if you require it elsewhere.

Uninstall cryus-sasl2:

    :::term
    $ sudo port -f uninstall cyrus-sasl2

Using from Rails 3.0.x
----------------------

In your Gemfile:

    :::ruby
    gem "dalli'

Configure your app to use memcache for the cache store in production, add the following to config/environments/production.rb:

    :::ruby
    config.cache_store = :dalli_store

To configure your app to use memcache for the session store in production, add the following to config/initializers/session_store.rb:

    :::ruby
    require 'action_dispatch/middleware/session/dalli_store'
	Rails.application.config.session_store :dalli_store, :key => ...

In your development environment, Rails.cache will default to an in-memory memory store that doesn't require a running memcached.

Using from Rails 2.3.x
----------------------

Rails abstracts the caching mechanisms through Rails.cache.  This was only introduced in Rails 2.3.3.  You must be using Rails 2.3.3 or newer to use memcache on Heroku.

In your .gems file:

   :::ruby
   dalli

For Rails version 2.3.3 and higher using .gems, update your config/environment.rb:

    :::ruby
    config.gem 'dalli'
    require 'memcached'
    
Configure your app to use memcache for the cache store in production.  Add the following to config/environments/production.rb:

    :::ruby
    require 'active_support/cache/dalli_store23'
    config.cache_store = :dalli_store

To setup your session store to use memcache in production. add the folling to config/initializers/session_store.rb:

    :::ruby
    if RAILS_ENV == 'production'
      require 'action_controller/session/dalli_store'
      ActionController::Base.session_store = :dalli_store
    end
    
In your development environment, Rails.cache will default to an in-memory memory store that doesn't require a running memcached.

You can test writing to the local memory cache in a console:

    :::term
    $ script/console
    >> Rails.cache.write('color', 'red')

And fetching the data back:

    >> Rails.cache.read('color')
    => "red"

Further reading:

* [Dalli Github Page](http://www.github.com/mperham/dalli)
* [Example on GitHub](http://github.com/heroku-examples/rails2-dalli)

Using from Sinatra
----------------

### Local memcached

You'll need to run a local memcached process to test against with Sinatra or other Ruby app.  Install it on Mac OS X:

    :::term
    $ sudo port install memcached

Or on Ubuntu:

    :::term
    $ sudo apt-get install memcached

You can also download the source from [the memcached site](http://memcached.org/).

Now run the memcached daemon:

    :::term
    $ memcached -vv
    slab class   1: chunk size     88 perslab 11915
    ...
    <15 server listening

### Sinatra app

In your configure block:

    :::ruby
    configure do
      require 'dalli'
      CACHE = Dalli::Client.new
    end

Test it out in a console:

    :::term
    $ irb -r myapp.rb
    >> CACHE.set('color', 'blue')

You should see output like this in your memcached -vv terminal:

    <18 set color 0 604800 7
    >18 STORED

Now read it back:

    >> CACHE.get('color')
    => "blue"

Further reading:

* [Blazing Fast Speeds with Sinatra and Memcached](http://railsillustrated.com/blazing-fast-sinatra-with-memcached.html) by Erik Andrejko

Deploying to Heroku
------------------

To use memcache on Heroku, install the memcache add-on:

    :::term
    $ heroku addons:add memcache

If you're using the memcached gem as described above, your app will use memcache on Heroku without any further code changes.

Getting Stats on Usage
----------------------

The memcached gem allows you to access your bucket's stats through the built in stats() method:

    :::term
	$ heroku console
	Ruby console for myapp.heroku.com
	>> d = Dalli::Client.new
	>> ... truncated output...
	>> d.stats
	=> {"mc3.ec2.northscale.net:11211"=>{"bytes"=>"314", "cas_misses"=>"0", "delete_hits"=>"0", "get_hits"=>"21", "rusage_system"=>"2268.570000", "pid"=>"321", "cas_hits"=>"0", "incr_misses"=>"0", "connection_structures"=>"1260", "evictions"=>"0", "threads"=>"4", "limit_maxbytes"=>"67108864", "incr_hits"=>"0", "cmd_flush"=>"0", "decr_misses"=>"0", "pointer_size"=>"64", "daemon_connections"=>"10", "time"=>"1286404176", "conn_yields"=>"0", "engine_maxbytes"=>"5242880", "version"=>"1.4.4_188_g0117a2c", "total_items"=>"24", "bytes_written"=>"1634404", "rejected_conns"=>"0", "decr_hits"=>"0", "delete_misses"=>"0", "cmd_get"=>"24", "total_connections"=>"409104", "curr_connections"=>"173", "uptime"=>"2500028", "auth_cmds"=>"9", "cmd_set"=>"24", "rusage_user"=>"2016.290000", "curr_items"=>"3", "bytes_read"=>"59710", "cas_badval"=>"0", "get_misses"=>"3"}}

The limit_maxbytes is not applicable with the Northscale Memcache Add-on.  
You can not see the engine_maxbytes field which provides the actual bucket size.  Note that for bucket sizes >= 1GB, a bug may prevent you from seeing the full bucket size.
