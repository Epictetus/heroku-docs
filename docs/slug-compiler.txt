Slug Compiler
=============

When you git push to Heroku, your code is received by the slug compiler.  Slug compiler transforms your repository into a slug, which is a compressed package optimized for lightning-fast distribution across the dyno grid.

Compile steps
-------------

The slug compiler is invoked by a git pre-receive hook.  The compile steps are:

1. Create a fresh checkout of HEAD from the master branch.
2. Download, build, and install local gems from the .gems manifest or gem bundler Gemfile.
3. Remove unused files, including the .git directory, anything in log and tmp, .gem files in the bundled gems directory, and anything specified in .slugignore.
4. Write the environment into the slug.  (The slug is rebuilt any time a config var is added or removed, or an addon added or removed.)
5. Package into the final slug archive.

Slugignore
----------

If your repository contains files not necessary to run your app, you may wish to add these to a .slugignore file in the root of your repository, to have them deleted from the checkout prior to packaging the slug.  Examples of files you may wish to exclude from the slug:

* Unit tests or specs
* Art sources (like .psd files)
* Design documents (like .pdf files)
* Test data

The format is roughly similar to .gitignore.  Here's an example .slugignore:

    *.psd
    *.pdf
    test
    spec

Slug size
---------

Your slug size is displayed at the end of a successful compile.  You can roughly estimate slug size locally by doing a fresh checkout of your app, deleting the .git directory, and running `du -hsc`.

Smaller slugs can be transferred across the dyno grid more quickly, and allowing for a faster spin-up speed on your dynos.  Generally speaking, any slug under 15MB is small and nimble; 30MB is average; and 40MB and above is weighty.  If you find your app getting into the 40MB+ range, you may want to look into some techniques (such as removing unneeded dependencies or excluding files via slugignore) to reduce the size.

