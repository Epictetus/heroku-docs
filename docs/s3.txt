Using S3 for file uploads
=========================

Simple Storage Service, or S3, is a service provided by Amazon to store data. It's great to store uploaded files from your app since it offers better scalability, reliability and speed than just storing files on the filesystem.

Best of all, since Heroku also runs on the Amazon platform, transfers to S3 are free.

The most convenient way to send files to S3 is using [Ruby upload plugins](#ruby-plugins), like Attachment-Fu or Paperclip. If you need to support very big file uploads, however, we recommend doing [direct uploads to S3](#direct-upload).

Concepts
--------

* Bucket: It's a container for your files, like a directory. All files sent to S3 must belong to a bucket. Buckets must be unique across the whole Amazon system. [More about Buckets](http://www.labnol.org/internet/tools/amazon-s3-buckets-tutorial/3890/).
* Access Key Id: Identifies your S3 account. provided by Amazon.
* Secret Access Key: It's like your S3 password, also provided by Amazon.

Ruby plugins
------------

### Attachment-Fu ###

Add `aws-s3` to your [gem manifest](/gems) and specify `:s3` as your storage backend:

    :::ruby
    class User
      has_attachment :storage => :s3
    end

Configuration is done in `config/amazon_s3.yml`:

    :::yaml
    development:
      bucket_name: myappdevelopment
      access_key_id: <your key>
      secret_access_key: <your key>

    test:
      bucket_name: myapptest
      access_key_id: <your key>
      secret_access_key: <your key>

    production:
      bucket_name: myapp
      access_key_id: <your key>
      secret_access_key: <your key>

### Paperclip ###

Very similar setup: add `aws-s3` to your [gem manifest](/gems), set the storage backend to `:s3` and inform the path of your S3 config file:

    :::ruby
    class User
      has_attached_file :photo,
          :storage => :s3,
          :s3_credentials => "#{RAILS_ROOT}/config/s3.yml",
          :path => "/:style/:filename"
    end

Then create that YAML file to setup credentials and your bucket:

    :::yaml
    development:
      bucket: myappdevelopment
      access_key_id: <your key>
      secret_access_key: <your key>

    test:
      bucket: myapptest
      access_key_id: <your key>
      secret_access_key: <your key>

    production:
      bucket: myapp
      access_key_id: <your key>
      secret_access_key: <your key>


Direct Upload
-------------

This is the preferred approach if you're working with file uploads bigger than 4mbs. The idea is to skip the hop on your application dyno, making a connection from the end user browser straight to S3.

This is done with [S3 SWF Upload Plugin](http://github.com/GreenAsJade/s3-swf-upload-plugin/tree/master), initially created by ELC Tech and enhanced by Martin Gregory.


Updating Your S3 Credentials
--------------------

If you find that you need to update your S3 access credentials, start by visiting your [Security Credentials](http://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key) page in the AWS portal. In the Access Credentials section, you'll see a tabbed panel.

<img src="http://heroku.images.s3.amazonaws.com/docs/credentials.png" alt="Manage S3 credentials" style="border:2px solid #eee; padding:5px;" />

AWS allows you to have two access keys at a time, so (assuming you've only got one, as in the screenshot here) go ahead and create a new one. Update your Heroku application with the new credentials, and be sure to test that they work. Then, you're free to return to the AWS portal and deactivate (and delete) your older key.
