SSL
===

SSL is a cryptographic protocol that provides end-to-end data encryption and
data integrity for all web requests. Apps that transmit sensitive data should
enable SSL to ensure all information is transmitted securely.

Piggyback SSL (myapp.heroku.com only)
-------------------------------------

SSL can be turned on for any `.heroku.com` domain by enabling the Piggyback SSL
add-on with the [heroku command-line tool](heroku-command):

    :::term
    $ cd myapp
    $ heroku addons:add piggyback_ssl
    Adding ssl to myapp...done.

Access the app over SSL at: `https://myapp.heroku.com/`. 

An app specific SSL certificate is not required for Piggyback SSL. The
`*.heroku.com` wildcard SSL certificate is used for all apps. You can view
information about this certificate by visiting <https://heroku.com/> and
clicking the lock icon in your browser.

Custom-domain SSL (www.yourdomain.com)
--------------------------------------

### Overview

Heroku offers you three choices for enabling SSL on your custom domain(s): SNI, Hostname based SSL and finally IP based SSL. Here's a quick overview of the use cases for each product:

*   [SNI](http://addons.heroku.com/ssl) is a newer standard that requires browser support. It works on most modern browsers, with the notable exceptions of Internet Explorer 6-7 on Windows XP, and Google Chrome on OS X. For that reason, we recommend you use SNI for testing and other environments where you control the browser selection.

*   [Hostname based SSL](http://addons.heroku.com/ssl) works with all browsers. Use it when you will be accessing you site via SSL on a subdomain such as www.myapp.com, secure.myapp.com or *.myapp.com. Hostname based SSL will not work with root domains as it relies on CNAME aliasing of your custom domain names. CNAME aliasing of root domains is an RFC violation.

*   [IP based SSL](http://addons.heroku.com/ssl) works in all browsers, and is necessary if you want to use SSL when accessing your app using a root domain such as myapp.com. It also works with subdomains.

The steps for setting up custom domain SSL with your Heroku app are as follows

1.  [Acquire SSL certificate](#acquirecert)
2.  [Add it to your application](#addcert)
3.  [Install the desired add-on](#chooseaddon)
4.  [Configure DNS](#configuredns) (not necessary for SNI)

### <a name="acquirecert">Acquire SSL Certificate</a>

All custom domain SSL options require generating an SSL certificate.  You can use the same certificate for either solution.  When generating a certificate for Heroku, here is some information you may need to know:

 * Web Server: Nginx
 * You must remove the passphrase from your certificate so Heroku can automatically start the server 
 
For testing, use these excellent instructions to generate a [self-signed certificate](http://www.akadia.com/services/ssh_test_certificate.html).
In production, to remove the warnings, you will need to [purchase a SSL certificate](http://www.google.com/search?client=safari&rls=en&q=ssl+certificate&ie=UTF-8&oe=UTF-8).  Each provider will walk you through the process on their website.

### <a name="addcert">Add the certificate to your app</a>

Using the certificate you generated in the previous step, upload it to Heroku:

    :::term
    $ heroku ssl:add cert.pem private.key
    Added certificate to www.yourdomain.com, expiring in 2012/08/27 22:16:39 -0700

If you purchased a certificate, it may include a [chain or intermediate certificate](http://help.godaddy.com/article/868). In this case, you should append it to your site certificate before uploading it to your app:

    :::term
    $ cat chain.crt >> cert.pem
    $ heroku ssl:add cert.pem private.key
    Added certificate to www.yourdomain.com, expiring in 2012/08/27 22:16:39 -0700
    
NOTE: Certificates purchased from Godaddy.com always include the chain/intermediate certificate, so please be sure to follow the instructions above if you have a Godaddy certificate.   

### <a name="chooseSSL">Choose your SSL addon</a>

Now that you've uploaded your certificate, you can choose your desired SSL option:

#### SNI SSL

    :::term
    $ heroku addons:add ssl:sni
    Adding ssl to myapp...done.
    
That's it, you're done. If your certificate was for "www.yourdomain.com", you should now be able to type https://www.yourdomain.com into a browser, and browse your app securely.

#### Hostname Based SSL    

    :::term
    $ heroku addons:add ssl:hostname
    Adding ssl to myapp...done.
    
Within a few minutes you should receive an email containing the hostname of your new SSL endpoint. Proceed to follow the instructions for setting up DNS.
    

#### IP Based SSL    

    :::term
    $ heroku addons:add ssl:ip
    Adding ssl to myapp...done.
    
Within two (2) business days of adding the add-on, you will receive an email containing the IP address of your SSL endpoint along with instructions for completing the necessary DNS configuration.

### <a name="configuredns">Configure DNS</a>

For hostname and IP based SSL, simple DNS configuration is necessary to complete the setup.

#### Hostname Based SSL

Shortly after installing the add-on you will receive an email containing the hostname of your SSL endpoint. It will look like this:

    appid1234herokucom-56789.us-east-1.elb.amazonaws.com
    
To enable SSL for a particular subdomain within your custom domain, you must create a CNAME alias pointing the subdomain to the SSL endpoint above. If you wanted to use "www.yourdomain.com", the output of the UNIX host command should look like this after completing DNS configuration:

    :::term
    $ host www.yourdomain.com
    www.yourdomain.com is an alias for appid1234herokucom-56789.us-east-1.elb.amazonaws.com
    appid1234herokucom-56789.us-east-1.elb.amazonaws.com has address 1.1.1.1
    
The actual IP address of the SSL endpoint will vary.
    
NOTE: Remember to point the CNAME to the SSL endpoint address listed in your confirmation email, and *not* proxy.heroku.com. Also, keep in mind that the subdomain(s) you alias have to be covered in your SSL certificate. That is, it must specify it explicitly or through a wildcard (*.yourdomain.com).

#### IP Based SSL

No more than 2 business days after installing the add-on you will receive an email from our support system specifying the IP address of your custom SSL endpoint. Having an IP address will allow you to use a root domain for SSL traffic to your app. To do this, you must create an A Record mapping the root domain to the IP address listed in the email. If the IP address was 1.1.1.1 and your root domain "yourdomain.com", the output from the UNIX host command should look like this:

    :::term
    $ host yourdomain.com
    yourdomain.com has addresss 1.1.1.1
    
If you wish to use a subdomain with your IP based SSL endpoint, the easiest way is to alias the subdomain to the root domain. For "www.subdomain.com", the output from the host command should look as follows:

    :::term
    $ host www.yourdomain.com
    www.yourdomain.com is an alias for yourdomain.com
    yourdomain.com has addresss 1.1.1.1
