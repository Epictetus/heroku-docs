PGBackups by Heroku
===================

The Heroku PGBackups addon lets you easily capture and manage backups for your shared and dedicated Heroku PostgreSQL databases.

Install
-------

### Plugin

To use the `heroku pgbackups` commands shown throughout this document, install the PostgreSQL by Heroku client plugin:

    $ heroku plugins:install http://github.com/heroku/heroku-postgresql.git

### Add-on

Install the addon:

    $ heroku addons:add pgbackups
    Adding pgbackups to myapp... done

Backup
------

Capture a backup of your primary database:

    $ heroku pgbackups:capture
    
    DATABASE_URL  ----backup--->  b003

    Dump... 2.6MB, done
    Upload... 2.6MB, done

    

If you have multiple databases on your application, you can choose which one to backup by specifying at Database ID (DB_ID):

    $ heroku pgbackups:capture HEROKU_POSTGRESQL_URL
    
    HEROKU_POSTGRESQL_URL  ----backup--->  b004
    
    Dump ... 424.7MB, done
    Upload ... 424.7MB, done
    

Backup Management
-----------------

You can get a summary list of all your backups:

    $ heroku pgbackups:list
    ID   | Backup Time         | Size    | Database             
    -----+---------------------+---------+----------------------
    b003 | 2010/10/22 15:16.01 |   2.6MB | SHARED_DATABASE_URL  
    b004 | 2010/10/22 15:18.12 | 424.7MB | HEROKU_POSTGRESQL_URL

You can get detailed information about an individual backup by backup ID:

    $ heroku pgbackups:info b004
    === Backup b026
    Backup Time  2010/10/26 10:29.52
    Database     HEROKU_POSTGRESQL_URL
    Size         424.7MB
    URL          'http://s3.amazonaws.com/...'
    

You can delete a backup. Depending on your plan you will need to delete obsolete backups manually:

    $ heroku pgbackups:destroy b003
    Backup b003 will be permanently deleted Are you sure (y/N)? y
    Backup b003 deleted.

Restore
-------

You can restore a backup into a database. This is a destructive operation: the restore operation will drop existing data and replace it with the contents of the backup. The contents of the database prior to a restore *will not be recoverable*.

    $ heroku pgbackups:restore b007

    DATABASE_URL  <---restore---  b007
                                  DATABASE_URL
                                  2010/10/25 21:41.10
                                  1.7MB

    Download... 1.7MB, done
    Restore... 1.7MB, done
    

Import
------

If you have an existing PostgreSQL database you'd like to export from elsewhere, dump it in compressed format using the open source <a href="http://www.postgresql.org/docs/8.4/interactive/backup-dump.html">pg_dump</a> tool:

    $ PGPASSWORD=mypassword pg_dump -Fc --no-acl --no-owner -h myhost -U myuser mydb > mydb.dump

Upload it somewhere with an HTTP accessible URL.  We recommend using Amazon S3 and <a href="http://www.s3fox.net/">S3Fox</a>.  Create the file with private access and create a temporary authorized URL for the Heroku import.  Then cut and paste that URL into your restore command:

    $ heroku pgbackups:restore 'http://s3.amazonaws.com/.....mydb.dump?authparameters'

NOTE: Be sure to use single quotes around the temporary S3 URL, as it contains ampersands and other characters that will confuse your shell otherwise.

Exporting
------

If you'd like to move your database out of the Heroku PostgreSQL service, take a backup and then download it:

    $ heroku pgbackups:download b007
    
    DATABASE_URL  <---restore---  b007
                                  DATABASE_URL
                                  2010/10/25 21:41.10
                                  1.7MB

    Download ... 1.7MB / 1.7MB, done
    
You can also use standard tools such as curl, wget, or any web browser to retrieve the URL. Note that the backup URLs will expire 10 minutes after they are issued.