SQL Database (PostgreSQL)
=========================

Overview
--------

Heroku provides each app with a full-featured [PostgreSQL
database](http://postgresql.org/). For Rails apps, database connectivity is
configured automatically -- your app should *just work*. For app's that use the
DataMapper or Sequel ORMs, the `DATABASE_URL` environment variable contains
database connection details.

There are [multiple database packages to choose from](http://heroku.com/pricing),
and you can change plans at any time. The _Blossom_ and _Koi_ plans
are hosted within Heroku's shared database cluster, while the _Ronin_, _Fugu_,
and _Zilla_ plans are hosted on a high-performance machine dedicated to your
app. Database redundancy and failover is fully managed by Heroku's infrastructure
regardless of plan. Upgrading from the shared tier to the dedicated tier is
seamless and managed by Heroku as well.

Shared vs. Dedicated
--------------------

Heroku offers you the choice of running on a shared or dedicated database package.  In general, the shared database will give you better peak performance at a lower price, with the tradeoff that your performance may be impacted by the operations of another user.  Dedicated databases offer predictable performance at a higher cost.

<a name="cpu_units"></a>
Database performance on Heroku is measured by "CPU Units".  A CPU Unit is a measure of how fast the CPU and overall IO of the underlying machine are.  Shared databases run on very high performance machines, shared among many different applications.  Dedicated databases allow you to choose the performance package that best meets your needs.

Note that CPU unit is only a measure of database performance.  Regardless of which database you choose, each <a href="http://heroku.com/how/dynos">dyno</a> is it's own independent grid process. 

Regardless of which database you choose, your data is always protected, accessible only by your own application.

Using the DATABASE_URL environment variable (Rails)
------------------------------------------------------
To ease deployment of typical Rails applications, Heroku automatically generates a new database.yml file on deployment.  This auto-generated database.yml file configures your RACK_ENV environment to your selected postgres db.  This enables you to simply push a rails app up to Heroku and have it automatically connect to your database.
 
	$ heroku console
	Ruby console for myapp.heroku.com
	>> ENV['DATABASE_URL']
	=> "postgres://username:password@hostname/database"

And the resulting database.yml:

    :::yml
	production: 
	  encoding: unicode
	  adapter: postgresql
	  username: username
	  port: 5432
	  host: hostname
	  database: database
	  password: password

If you would like to have your rails application connect to a non-Heroku provided database, you can take advantage of this same mechanism.  Simply set your DATABASE_URL config var to point to any cloud-accessible database, and Heroku will automatically create your database.yml file to point to your chosen server.  The <A href="http://addons.heroku.com/amazon_rds">Amazon RDS</a> Add-on does this for you automatically, though you can also use this same method to connect to non-RDS databases as well.


Using the DATABASE_URL environment variable (Sequel / DataMapper)
-----------------------------------------------------------------

Your database credentials and connection details can be obtained from the
`DATABASE_URL` environment variable. This is especially useful for ORMs like
DataMapper and Sequel that use database URLs / connection strings instead of
files for configuration.

A popular idiom is to use the value of the `DATABASE_URL` environment variable
when defined, but fallback on a default database URL otherwise.

Configuring Sequel:

    :::ruby
    Sequel.connect(ENV['DATABASE_URL'] || 'sqlite://my.db')

Configuring DataMapper:

    :::ruby
    DataMapper.setup(:default, ENV['DATABASE_URL'] || 'sqlite3://my.db')

Frequently Asked Questions
--------------------------

### What database does Heroku use?

Our shared database uses PostgreSQL 8.3. Our dedicated database uses PostgreSQL 8.4.

### I have an app built against MySQL. Is it going to work with Heroku?

Yes, as long as no database specific queries are used. For most apps, it
just works, and in a few cases a quick code fix is all that's required (see
[Common Issues](#common-issues-migrating-to-postgres) below).

### How can I import my existing data to Heroku?

The Heroku command line tool includes a `db:push`, which can be used to import
data from your local environment into your remote Heroku database. See the
[database import / export](/taps#import-push-to-heroku) topic for more
information.

### Can I export my data out of Heroku?

Certainly. You can export your remote Heroku database at any time using the
`heroku db:pull` command. See the [database import / export](/taps#export-pull-from-heroku)
topic for more information.

### Can I access my database from another app/host?

No, connecting to your database from machines outside of Heroku is not
supported. We recommend that you encapsulate data access in an API to manipulate
it.

Common issues migrating to PostgreSQL
-------------------------------------

Below are a list of common mistakes that might result in problems when migrating
your Rails app from SQLite or MySQL to PostgreSQL:

### Invalid operator

Example: _PGError: ERROR:  operator does not exist: character varying = integer_

Cause: PostgreSQL is more sensitive with data types than MySQL or SQlite.
PostgreSQL will check and throw errors when an operator is applied to an
unsupported data type. For instance, you can't compare strings with integers
without casting.

Solution: Make sure the operator is adequate for the data type.  ActiveRecord
does this automatically when you use an interpolated condition form.

Array conditions:

    :::ruby
    :conditions => ['column1 = ? AND column2 = ?', value1, value2]

Hash conditions:

    :::ruby
    :conditions => { :column1 => value1, :column2 => value2 }

### Binary field limit

Cause: PostgreSQL doesn't limit binary fields. Any migrations adding a `:binary`
field with the `:limit` option will raise a syntax error.

Solution: Omit the `:limit` for binary fields if possible -- or test the DB
before running it (see Testing the Database below).

### Table doesn't exist

Example: _PGError: ERROR: relation "documents" does not exist_

Cause: This is the standard message displayed by Postgres when a table doesn't
exists. That means your query is referencing a table that is not on the
database.

Solution: Make sure your migrations ran normally, and that you're referencing a
table that exists.

You can see what tables you have running the following command on `heroku
console`:

    :::term
    >> ActiveRecord::Base.connection.tables

### Cannot change column type

Example: _PGError: ERROR: column "verified_at" cannot be cast to type "date"_

Cause: PostgreSQL doesn't know how to cast all the rows in that table to the
specified type. Most likely it means you have an integer or a string in that
column.

Solution: Inspect your records and make sure they can be converted to the new
type. Sometimes it's easier to just avoid using `change_column`,
renaming/creating a new column instead.

### Testing the Database

To fix database-specific queries where ActiveRecord won't help (for instance,
foreign keys), the only solution is to test the database before running a
migration or query:

    :::ruby
    case ActiveRecord::Base.connection.adapter_name
    when 'SQLite'
         execute 'sqlite specific query'
    when 'PostgreSQL'
         execute 'postgres specific query'
    else
         raise 'Migration not implemented for this DB adapter'
    end