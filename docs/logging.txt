Logging (beta)
=======

Heroku's logging add-on routes together logs from your application and Heroku's infrastructure into a single location.  This feature is currently in public beta.

Setup
-----

Add the add-on to your app:

    :::term
    $ heroku addons:add logging
    Adding logging to myapp... done

Writing to your log
-------------------

Anything written to standard out (`stdout`) or standard error (`stderr`) is captured into your logs.  This means that you can log from anywhere in your application code with a simple puts statement:

    :::ruby
    puts "Hello, logs!"

If you are using Rails, add this to your `config/application.rb` (Rails 3) or `config/environment.rb` (Rails 2) initializer block:

    :::ruby
    config.logger    = Logger.new(STDOUT)
    config.log_level = :info

This will send all the log output from Rails to STDOUT including exceptions.

Log retrieval
-------------

To fetch your logs:

    :::term
    $ heroku logs
    2010-09-16T15:13:46-07:00 app[web.1]: Processing PostController#list (for 208.39.138.12 at 2010-09-16 15:13:46) [GET]
    2010-09-16T15:13:46-07:00 app[web.1]: Rendering template within layouts/application
    2010-09-16T15:13:46-07:00 app[web.1]: Rendering post/list
    2010-09-16T15:13:46-07:00 app[web.1]: Rendered includes/_header (0.1ms)
    2010-09-16T15:13:46-07:00 app[web.1]: Completed in 74ms (View: 31, DB: 40) | 200 OK [http://myapp.heroku.com/]
    2010-09-16T15:13:46-07:00 heroku[router]: GET myapp.heroku.com/posts queue=0 wait=0ms service=1ms bytes=975
    2010-09-16T15:13:47-07:00 app[worker.1]: 2 jobs processed at 16.6761 j/s, 0 failed ...

In this example, the output includes line from one of the app's web dynos, the Heroku HTTP router, and one of the app's workers.  Each line is formatted as follows:

    timestamp source[process]: message

* **Timestamp** - The time recorded by syslog on the machine where the process is running.
* **Source** - All of your app's processes (web webs, background workers, cron) will have a source of `app`.  All of Heroku's system components (HTTP router, process manager) will have a source of `heroku`.
* **Process** - The name of the process or component that wrote this log line.  For example, worker #3 will be `worker.3`, and the Heroku HTTP router will be `router`.
* **Message** - The content of the log line.

The logs command fetches 20 lines of logs by default.  You can fetch up to 500 lines using the `--num` (or `-n`) option:

    :::term
    $ heroku logs -n 100

Realtime tail
-------------

Realtime tailing of your app logs is a powerful way to get insight into the behavior of your live application, and to debug current problems.  For a realtime tail use the `--tail` (or `-t`) option:

    :::term
    $ heroku logs --tail

Similar to `tail -f`, this will show you recent logs and leave the session open for realtime logs to stream in.  Press Ctrl-C when done.

Filtering
---------

If you wish to fetch only logs with a certain source, a certain process, or both, you can use the 	`--source` (or `-s`) and `--ps` (or `-p`) filtering arguments:

    :::term
    $ heroku logs --source heroku --ps router
    2010-09-16T15:13:46-07:00 heroku[router]: GET myapp.heroku.com/posts queue=0 wait=0ms service=1ms bytes=975
    $ heroku logs -s app
    2010-09-16T15:13:46-07:00 app[web.1]: Processing PostController#list (for 208.39.138.12 at 2010-09-16 15:13:46) [GET]
    2010-09-16T15:13:47-07:00 app[worker.1]: 2 jobs processed at 16.6761 j/s, 0 failed ...
    $ heroku logs -s app -p worker.1
    2010-09-16T15:13:47-07:00 app[worker.1]: 2 jobs processed at 16.6761 j/s, 0 failed ...

You can also combine the filtering switches with `--tail` to get a realtime stream of filtered output.

